// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/database (interfaces: StoragerDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	services "gophermart/internal/services"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStoragerDB is a mock of StoragerDB interface.
type MockStoragerDB struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerDBMockRecorder
}

// MockStoragerDBMockRecorder is the mock recorder for MockStoragerDB.
type MockStoragerDBMockRecorder struct {
	mock *MockStoragerDB
}

// NewMockStoragerDB creates a new mock instance.
func NewMockStoragerDB(ctrl *gomock.Controller) *MockStoragerDB {
	mock := &MockStoragerDB{ctrl: ctrl}
	mock.recorder = &MockStoragerDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragerDB) EXPECT() *MockStoragerDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStoragerDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoragerDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStoragerDB)(nil).Close))
}

// GetUser mocks base method.
func (m *MockStoragerDB) GetUser(arg0 services.UserAuthInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUser", arg0)
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoragerDBMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStoragerDB)(nil).GetUser), arg0)
}
